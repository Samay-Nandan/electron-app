name: Build and Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            platform: linux
            server_binary_path: build/linux/server/server
            ai_binary_path: build/linux/ai/main
            build_output: build/linux

          - os: windows-2019
            platform: win
            server_binary_path: build/windows/server/server.exe
            ai_binary_path: build/windows/ai/main.exe
            build_output: build/windows

          - os: macos-latest
            platform: mac
            server_binary_path: build/mac/server/server
            ai_binary_path: build/mac/ai/main
            build_output: build/mac

    runs-on: ${{ matrix.os }}

    steps:
      - name: 🛎️ Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: 📦 Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
        shell: bash

      - name: ➕ Add Poetry to PATH (cross-platform)
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "$APPDATA/Python/Scripts" >> $GITHUB_PATH
          else
            echo "$HOME/.local/bin" >> $GITHUB_PATH
          fi
        shell: bash

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "yarn"

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🧪 Run root typecheck
        run: yarn typecheck

      - name: 🔍 Run root lint
        run: yarn lint

      - name: 🛠️ Build server
        run: yarn workspace server build

      - name: 📦 Package server binary
        run: |
          export BUILD_OUTPUT="$(pwd)/${{ matrix.build_output }}"
          PLATFORM="${{ matrix.platform }}"

          if [ "$PLATFORM" = "linux" ]; then
            yarn workspace server run pkg:linux
          elif [ "$PLATFORM" = "win" ]; then
            yarn workspace server run pkg:win
          elif [ "$PLATFORM" = "mac" ]; then
            export MACOSX_DEPLOYMENT_TARGET=11.0
            yarn workspace server run pkg:mac
          fi
        shell: bash

      - name: 🔍 Validate server binary
        run: |
          if [ ! -f "${{ matrix.server_binary_path }}" ]; then
            echo "❌ Missing Node binary: ${{ matrix.server_binary_path }}"
            exit 1
          else
            echo "✅ Found Node binary: ${{ matrix.server_binary_path }}"
          fi
        shell: bash

      - name: 🛠️ Build AI
        run: yarn workspace ai build

      - name: 📦 Package AI binary
        run: |
          export BUILD_OUTPUT="$(pwd)/${{ matrix.build_output }}"
          PLATFORM="${{ matrix.platform }}"

          if [ "$PLATFORM" = "linux" ]; then
            yarn workspace ai run pkg:linux
          elif [ "$PLATFORM" = "win" ]; then
            yarn workspace ai run pkg:win
          elif [ "$PLATFORM" = "mac" ]; then
            export MACOSX_DEPLOYMENT_TARGET=11.0
            poetry run pyinstaller --clean --exclude-module rapidfuzz.__pyinstaller pyinstaller.spec --distpath build/mac/ai
          fi
        shell: bash

      - name: 🔍 Validate AI binary
        run: |
          if [ ! -f "${{ matrix.ai_binary_path }}" ]; then
            echo "❌ Missing AI binary: ${{ matrix.ai_binary_path }}"
            exit 1
          else
            echo "✅ Found AI binary: ${{ matrix.ai_binary_path }}"
          fi
        shell: bash

      - name: 🌐 Build frontend
        run: yarn workspace frontend build:${{ matrix.platform }}

      - name: 🏗️ Package with Electron Builder
        run: yarn electron-builder --config electron-builder.${{ matrix.platform }}.yml --${{ matrix.platform }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: 🚀 Upload artifacts to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build/${{ matrix.platform }}/**/*.AppImage
            build/${{ matrix.platform }}/**/*.deb
            build/${{ matrix.platform }}/**/*.exe
            build/${{ matrix.platform }}/**/*.dmg
            build/${{ matrix.platform }}/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
