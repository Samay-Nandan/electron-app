name: Build and Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            server_binary_path: build/linux/server/server
            ai_binary_path: build/linux/ai/main
            build_output: build/linux
          - os: windows-latest
            platform: win
            server_binary_path: build/windows/server/server.exe
            ai_binary_path: build/windows/ai/main.exe
            build_output: build/windows
          - os: macos-latest
            platform: mac
            server_binary_path: build/mac/server/server
            ai_binary_path: build/mac/ai/main
            build_output: build/mac

    runs-on: ${{ matrix.os }}

    steps:
      - name: 🛎️ Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "yarn"

      - name: 🛠️ Skip postinstall in CI
        run: echo "YARN_IGNORE_SCRIPTS=true" >> $GITHUB_ENV

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 📦 Install pkg CLI
        run: npm install -g pkg

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: 📦 Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: 📦 Install AI dependencies
        run: poetry install --no-root
        working-directory: ai

      - name: 🧪 Typecheck backend
        run: yarn workspace server typecheck

      - name: 🔍 Lint backend
        run: yarn workspace server lint

      - name: 🛠️ Build server
        run: yarn workspace server build

      - name: 🗂️ List server build output
        run: ls -l server/dist || echo "❌ dist folder not found"

      - name: 📦 Package server binary
        run: |
          set -euo pipefail

          PLATFORM="${{ matrix.platform }}"
          ARCH="x64"

          # Special case: macOS ARM
          if [[ "$PLATFORM" == "mac" && "$(uname -m)" == "arm64" ]]; then
            ARCH="arm64"
          fi

          TARGET="node18-$PLATFORM-$ARCH"
          OUTPUT_PATH="${{ matrix.build_output }}/server/server"

          mkdir -p "$(dirname "$OUTPUT_PATH")"

          echo "📦 Packaging server binary..."
          echo "➡️ Platform: $PLATFORM"
          echo "➡️ Architecture: $ARCH"
          echo "➡️ pkg target: $TARGET"
          echo "➡️ Output path: $OUTPUT_PATH"

          # Build the binary
          pkg server/dist/server.js \
            --targets "$TARGET" \
            --output "$OUTPUT_PATH"

          echo "✅ pkg completed successfully"
          ls -lh "$(dirname "$OUTPUT_PATH")"
        shell: bash

      - name: 📁 Check server output directory
        run: ls -lR ${{ matrix.build_output }}/server || echo "❌ Directory not found!"
        shell: bash

      - name: 🔍 Validate server binary
        run: |
          if [ ! -f "${{ matrix.server_binary_path }}" ]; then
            echo "❌ Missing binary: ${{ matrix.server_binary_path }}"
            exit 1
          else
            echo "✅ Found binary: ${{ matrix.server_binary_path }}"
          fi
        shell: bash

      - name: 🛠️ Build AI
        run: yarn workspace ai build

      - name: 📦 Package AI binary
        run: |
          PLATFORM="${{ matrix.platform }}"

          if [ "$PLATFORM" = "linux" ]; then
            yarn workspace ai run pkg:linux
          elif [ "$PLATFORM" = "win" ]; then
            yarn workspace ai run pkg:win
          elif [ "$PLATFORM" = "mac" ]; then
            yarn workspace ai run pkg:mac
          fi
        shell: bash

      - name: 🔍 Validate AI binary
        run: |
          if [ ! -f "${{ matrix.ai_binary_path }}" ]; then
            echo "❌ Missing AI binary: ${{ matrix.ai_binary_path }}"
            exit 1
          else
            echo "✅ Found AI binary: ${{ matrix.ai_binary_path }}"
          fi
        shell: bash

      - name: 🧪 Typecheck frontend
        run: yarn workspace frontend typecheck

      - name: 🔍 Lint Frontend
        run: yarn workspace frontend lint

      - name: 🌐 Build frontend
        run: yarn workspace frontend build:${{ matrix.platform }}

      - name: 🏗️ Package with Electron Builder
        run: yarn electron-builder --config electron-builder.${{ matrix.platform }}.yml --${{ matrix.platform }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: 🚀 Upload artifacts to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build/${{ matrix.platform }}/**/*.AppImage
            build/${{ matrix.platform }}/**/*.deb
            build/${{ matrix.platform }}/**/*.exe
            build/${{ matrix.platform }}/**/*.dmg
            build/${{ matrix.platform }}/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
